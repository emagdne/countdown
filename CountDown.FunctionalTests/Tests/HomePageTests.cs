using CountDown.FunctionalTests.Data.TestData;
using CountDown.WebTestingFramework;
using NUnit.Framework;

namespace CountDown.FunctionalTests.Tests
{
    [TestFixture]
    public class The_Home_Page
    {
        [TestFixtureSetUp]
        public void SetUpOnce()
        {
            FunctionalTestHelper.SignInAsTestUser();
        }

        [SetUp]
        public void SetUp()
        {
            CountDownApp.GoToHomePage();
        }

        [Test]
        [Category("Functional UI Tests: Feature 5")]
        public void Should_Have_A_Link_To_Create_A_ToDo_Item()
        {
            Assert.That(CountDownApp.HomePage.HasCreateToDoLink(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 5")]
        public void Should_Display_The_Create_ToDo_Page_When_The_Create_ToDo_Item_Link_Is_Clicked()
        {
            CountDownApp.HomePage.ClickCreateToDoLink();
            Assert.That(CountDownApp.IsOnCreateToDoPage(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Display_No_More_Than_10_Items_At_A_Time()
        {
            var ids = FunctionalTestHelper.CreateToDoItems(11, "Test ToDo Item Generated By Test Case - Delete Me!",
                "Generated by " +
                "Should_Display_No_More_Than_10_Items_At_A_Time " +
                "in HomePageTests.cs");

            CountDownApp.GoToHomePage(); // Refresh page
            FunctionalTestHelper.DeleteToDoItems(ids);

            Assert.That(CountDownApp.HomePage.ToDoItemTable.ItemCount, Is.LessThanOrEqualTo(10));
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Display_A_Pagination_Control_If_More_Than_10_Items_Exist()
        {
            var ids = FunctionalTestHelper.CreateToDoItems(11, "Test ToDo Item Generated By Test Case - Delete Me!",
                "Generated by " +
                "Should_Display_A_Pagination_Control_If_More_Than_10_Items_Exist " +
                "in HomePageTests.cs");

            CountDownApp.GoToHomePage(); // Refresh page
            FunctionalTestHelper.DeleteToDoItems(ids);

            Assert.That(CountDownApp.HomePage.PaginationControl.IsVisible, Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Have_A_Link_To_Items_Pending()
        {
            Assert.That(CountDownApp.HomePage.HasItemsPendingLink(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void By_Default_Should_Have_Owned_By_Me_Filter_Checked()
        {
            Assert.That(CountDownApp.HomePage.Filters.OwnedByMe.IsChecked, Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void By_Default_Should_Have_Owned_By_Others_Filter_Checked()
        {
            Assert.That(CountDownApp.HomePage.Filters.OwnedByOthers.IsChecked, Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void By_Default_Should_Have_Assigned_To_Others_Filter_Unchecked()
        {
            Assert.That(CountDownApp.HomePage.Filters.AssignedToOthers.IsChecked, Is.False);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void By_Default_Should_Have_Completed_Filter_Unchecked()
        {
            Assert.That(CountDownApp.HomePage.Filters.Completed.IsChecked, Is.False);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Color_Items_Owned_By_And_Assigned_To_Others_White()
        {
            Assert.That(CountDownApp.HomePage.ColorsItemsOwnedByAndAssignedToOtherUsersWhite(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Color_Items_Owned_By_And_Assigned_To_Me_Orange()
        {
            Assert.That(CountDownApp.HomePage.ColorsItemsOwnedByAndAssignedToTheCurrentUserOrange(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Enable_The_Completed_Checkbox_For_Uncompleted_Items_Assigned_To_Me()
        {
            Assert.That(CountDownApp.HomePage.EnablesTheCompletedCheckboxForUncompletedItemsAssignedToTheCurrentUser(),
                Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Color_Items_Owned_By_Me_And_Assigned_To_Others_Yellow()
        {
            Assert.That(CountDownApp.HomePage.ColorsItemsOwnedByTheCurrentUserAndAssignedToAnotherUserYellow(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Disable_The_Completed_Checkbox_For_Uncompleted_Items_Assigned_To_Others()
        {
            Assert.That(CountDownApp.HomePage.DisablesTheCompletedCheckboxForUncompletedItemsAssignedToOtherUsers(),
                Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Color_Completed_Items_Gray()
        {
            Assert.That(CountDownApp.HomePage.ColorsCompletedItemsGray(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Disable_The_Completed_Checkbox_For_Completed_Items()
        {
            Assert.That(CountDownApp.HomePage.DisablesTheCompletedCheckboxForCompletedItems(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Show_Items_Owned_By_Me_When_The_Owned_By_Me_Filter_Is_Applied()
        {
            Assert.That(CountDownApp.HomePage.OnlyShowsItemsOwnedByTheCurrentUserWhenTheOwnedByMeFilterIsApplied(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Show_Items_Owned_By_Others_When_The_Owned_By_Others_Filter_Is_Applied()
        {
            Assert.That(CountDownApp.HomePage.OnlyShowsItemsOwnedByOthersWhenTheOwnedByOthersFilterIsApplied(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Show_Items_Assigned_To_Others_When_The_Assigned_To_Others_Filter_Is_Applied()
        {
            Assert.That(CountDownApp.HomePage.ShowsItemsAssignedToOthersWhenTheAssignedToOthersFilterIsApplied(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 6")]
        public void Should_Show_Completed_Items_When_The_Completed_Filter_Is_Applied()
        {
            Assert.That(CountDownApp.HomePage.ShowsCompletedItemsWhenTheCompletedFilterIsApplied(), Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 12")]
        public void Should_Display_A_Confirmation_Message_Box_When_Marking_An_Item_As_Complete()
        {
            CountDownApp.HomePage.MarkUncompletedToDoItemAsComplete(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id);
            var open = CountDownApp.HomePage.HasConfirmationMessageBoxOpen();
            CountDownApp.HomePage.ConfirmMessageBox.ClickCancel();
            Assert.That(open, Is.True);
        }

        [Test]
        [Category("Functional UI Tests: Feature 12")]
        public void Should_Uncheck_The_Checkbox_When_Answering_No_To_Marking_An_Item_Complete()
        {
            CountDownApp.HomePage.MarkUncompletedToDoItemAsComplete(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id);
            CountDownApp.HomePage.ConfirmMessageBox.ClickCancel();
            Assert.That(CountDownApp.HomePage.CompleteCheckboxIsChecked(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id), Is.False);
        }

        [Test]
        [Category("Functional UI Tests: Feature 12")]
        public void Should_Not_Mark_An_Item_As_Complete_When_Answering_No_To_Marking_An_Item_Complete()
        {
            CountDownApp.HomePage.MarkUncompletedToDoItemAsComplete(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id);
            CountDownApp.HomePage.ConfirmMessageBox.ClickCancel();
            Assert.That(CountDownDatabase.IsToDoItemComplete(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id), Is.False);
        }

        [Test]
        [Category("Functional UI Tests: Feature 12")]
        public void Should_Change_The_Item_To_Completed_When_Answering_Yes_To_Marking_An_Item_Complete()
        {
            CountDownApp.HomePage.MarkUncompletedToDoItemAsComplete(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id);
            CountDownApp.HomePage.ConfirmMessageBox.ClickOk();
            CountDownApp.HomePage.WaitForItemCompletion();
            bool completed = CountDownDatabase.IsToDoItemComplete(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id);
            CountDownDatabase.UpdateToDoItem(TestToDoItems.AssignedToAndOwnedByPrimaryUser.Id, false);
            Assert.That(completed, Is.True);
        }


        [Test]
        [Category("Functional UI Tests: Feature 10")]
        public void Should_Display_The_Edit_ToDo_Item_Page_After_Clicking_On_A_ToDo_Item()
        {
            CountDownApp.HomePage.ClickToDoItem();
            Assert.That(CountDownApp.IsOnEditToDoPage(), Is.True);
        }
    }
}